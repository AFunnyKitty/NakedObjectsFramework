<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using NakedObjects;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
	
    public class <#= efHost.EntityType.Name #>
    {
	
	#region Injected Services
	
	#endregion
	
	#region LifeCycle Methods
	
	#endregion
<#    
    foreach (var property in efHost.EntityType.Properties)
    {
		#>
		
<#
		CodeRegion region = new CodeRegion(this, 1);
		string edmType  = property.TypeUsage.ToString().Substring(4);
		region.Begin(code.Escape(property)+" ("+edmType+")");
		
		StartAttributeLine();
	    AddAttribute(NextMemberOrder());
	    if (property.Nullable) { 
			AddAttribute("Optionally");
	    }
	    if (property.TypeUsage.ToString().Equals("Edm.String")) {
	    	int maxLength = 0;
			var facetValue = property.TypeUsage.Facets.Where(x => x.Name == "MaxLength").First().Value;
			if (facetValue != null) {
	    		if (Int32.TryParse(facetValue.ToString(), out maxLength)) { 
					AddAttribute("StringLength("+maxLength.ToString()+")");
	   			}
			}
	  	} 
		if (property.TypeUsage.ToString().Equals("Edm.DateTime")) {
	    AddAttribute("Mask(\"d\")");
	    }
		OutputAttributeLine(); 
		#>
        public virtual <#= code.Escape(property.TypeUsage) #> <#= code.Escape(property) #> { get; set; }
<#
    	region.End();
	}

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
		#>
		
<#
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
			//Render a collection  
			CodeRegion region = new CodeRegion(this, 1);
		    EntityType toType = navProperty.ToEndMember.GetEntityType();
			region.Begin(code.Escape(navProperty)+" (Collection of "+toType.Name+")"); #>
		private ICollection<<#=code.Escape(toType) #>> <#=code.FieldName(navProperty)#> = new List<<#=code.Escape(toType) #>>();
<#
			StartAttributeLine();
		    AddAttribute(NextMemberOrder());
			AddAttribute("Disabled");
			OutputAttributeLine(); 
			#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; set; }
<#
        	region.End();
		}
        else
        {
			//Render a (single) reference property
			CodeRegion region = new CodeRegion(this, 1);	
	    	EntityType toType  = navProperty.ToEndMember.GetEntityType(); 
			region.Begin(code.Escape(navProperty)+" ("+toType.Name+")");#>
		
<# 
		    StartAttributeLine();
		    AddAttribute(NextMemberOrder());
			OutputAttributeLine(); 
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; set; }
<#
        	region.End();
		}
    }
#>
    }
}
<#+  
//Building attributes
private StringBuilder attBuild; 

private void StartAttributeLine() {
	attBuild = new StringBuilder();
	attBuild.Append("[");
}

private void AddAttribute(string att) {
	if (attBuild.Length > 1) {
		attBuild.Append(", ");
	}
	attBuild.Append(att);
}

private void OutputAttributeLine() {
	if (attBuild.Length == 1) {
		return; //It means no attribute has been added to the line
    }
	attBuild.Append("]"); #>
<#= attBuild.ToString() #>
<#+    attBuild = null;
}   

//MemberOrder
private int count; 
private int increment = 10;

private void InitialiseMemberOrder() {
   count = 100; 
}

private string NextMemberOrder() {
	int nmo = count;
	count = count + increment;
	return "MemberOrder("+nmo.ToString() +")";
}	
#>
