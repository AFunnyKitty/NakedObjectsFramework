<objects>
	<import resource="nakedobjects-spring.xml"/>

	<!-- ******************************************************************************************* -->	
	<!-- ServiceLocator-->
	<!-- ******************************************************************************************* -->
  <object id="ServiceLocator" type="sdm.systems.application.ClientSideServiceLocator, sdm.systems.application" factory-method="singletonInstance"/>

  <!-- ******************************************************************************************* -->
  <!-- ClientComponents -->
  <!-- This SdmStatic component is a true global singleton only one of these will ge created with -->
  <!-- the "CreateOnePerAppServer" method - and this acts as a bucket for all Singletons in the Sdm -->
  <!-- AppServer. If all interested code gets these components from this location, we are guaranteed -->
  <!-- there will only ever be one instance. -->
  <!-- ******************************************************************************************* -->
  <object id="ClientComponents"
    type="sdm.systems.application.ClientComponents, sdm.systems.application"
    factory-method="CreateOnePerAppServer">

    <property name="Services">
      <dictionary>
        <entry key="sdm.systems.application.services.api.recorder.IRecorder">
          <ref local="NoopRecorder" />
        </entry>

      </dictionary>
    </property>

    <property name="Repositories">
      <dictionary>
       
        <entry key="RestfulObjects.Test.Data.RestDataRepository">
          <ref local="RestDataRepository" />
        </entry>
        <entry key="RestfulObjects.Test.Data.IWithActionRepository">
          <ref local="WithActionRepository" />
        </entry>
        <!--<entry key="sdm.cap.bom.repository.ICAPRepository">
              <ref local="CAPRepository" />
            </entry>-->
      </dictionary>
    </property>

    <property name="ExternalCommandLibraries">
      <dictionary>
      </dictionary>
    </property>

  </object>

  <object id="WithActionRepository"
  type="RestfulObjects.Test.Data.WithActionService, sdm.RestfulObjects.Test.Data"
  dependency-check="none">
    <property name="Container">
      <ref local="SdmBusinessObjectContainer" />
    </property>
  </object>

  <object id="RestDataRepository"
type="RestfulObjects.Test.Data.RestDataRepository, sdm.RestfulObjects.Test.Data"
dependency-check="none">
    <!--<property name="Container">
      <ref local="SdmBusinessObjectContainer" />
    </property>-->
  </object>

  <!--<object id="CAPRepository"
        type="sdm.cap.bom.repository.naive.NaiveCAPRepository, sdm.cap.bom"
        dependency-check="none">
        <property name="Container">
          <ref local="SdmBusinessObjectContainer" />
        </property>
      </object>-->

  <object id="UserContext" type="sdm.core.boot.DotNetUserContext, sdm.core.boot">
    <property name="AuthorisationService" ref="NoopAuthorisationService" />
    <property name="RootClasses">
      <list>
        <value>RestfulObjects.Test.Data.ActionMenu</value>
        <!--<value>sdm.cap.bom.menu.CAPMenu</value>-->
      </list>
    </property>
  </object>



  <!--
			- NOF framework itself and SDM implementations of NOF interfaces
			-->
  <object id="NakedObjects" type="org.nakedobjects.object.repository.NakedObjectsClient, nakedobjects.net" init-method="init">
    <property name="ObjectPersistor" ref="LocalObjectManager" />
    <property name="Configuration" ref="Configuration" />
    <property name="ObjectLoader" ref="ObjectLoader" />
    <property name="SpecificationLoader" ref="SdmSpecificationLoader" />

  </object>
  <object id="ObjectLoader" type="org.nakedobjects.object.loader.ObjectLoaderImpl,nakedobjects.net">
    <description>
      To reuse the same instance each time set factory method = instance (i.e. singleton);
      The clearNonRefDataObjects() method is called when the nof is shutdown.
      If we are not using a singleton then the cacheloader will be recreated each time the nof is started.
    </description>
    <property name="ObjectFactory" ref="SdmObjectFactory" />
    <property name="AdapterFactory" ref="AdapterFactory" />
  </object>
  <object id="ShutdownListener" type="sdm.core.boot.DotNetClientShutdown, sdm.core.boot" />
  <object id="UpdateNotifier" type="org.nakedobjects.viewer.skylark.ViewUpdateNotifier, nakedobjects.net" />

  <object id="ProcessNotifier" type="sdm.services.processnotifier.ProcessNotifierService, sdm.services.impl" />

  <object id="SdmObjectFactory" type="sdm.systems.reflector.container.SdmObjectFactory, sdm.systems.reflector"/>
  <object id="AdapterFactory" type="sdm.systems.reflector.SdmReflectorFactory, sdm.systems.reflector" />
  <object id="LocalObjectManager" type="org.nakedobjects.object.persistence.objectstore.ObjectStorePersistor, nakedobjects.net">
    <property name="ObjectStore">
      <ref local="TransientObjectStore" />
    </property>
    <property name="PersistAlgorithm">
      <ref local="DefaultPersistAlgorithm" />
    </property>
  </object>
  <object id="TransientObjectStore" type="org.nakedobjects.object.persistence.objectstore.inmemory.TransientObjectStore, nakedobjects.net" />
  <object id="DefaultPersistAlgorithm" type="org.nakedobjects.object.persistence.DefaultPersistAlgorithm, nakedobjects.net">
    <property name="OidGenerator">
      <ref local="TimeBasedOidGenerator" />
    </property>
  </object>
  <object id="TimeBasedOidGenerator" type="org.nakedobjects.object.persistence.TimeBasedOidGenerator, nakedobjects.net"/>
  <object id="SdmSpecificationLoader" type="sdm.systems.reflector.SdmSpecificationLoader, sdm.systems.reflector">
    <property name="ReflectionPeerFactories">
      <list>
        <ref local="TransactionPeerFactory" />
      </list>
    </property>
  </object>
  <object id="TransactionPeerFactory" type="org.nakedobjects.object.transaction.TransactionPeerFactory, nakedobjects.net"/>
  <alias name="ProgrammableClock" alias="ClientClock" />
  <object id="ProgrammableClock" type="sdm.systems.application.time.programmable.ProgrammableClock, sdm.systems.application"/>

  <object id="Configuration" type="sdm.services.configurationservice.nofFramework.Configuration, sdm.services.impl">
    <constructor-arg index="0">
      <value>nakedobjects.properties</value>
    </constructor-arg>
  </object>

  <!-- ClientSideServiceLocator looks for alias ClientAuthenticationManager-->
  <alias name="AuthenticationManager" alias="ClientAuthenticationManager" />
  <object id="AuthenticationManager"
    type="sdm.services.noop.security.authentication.NoopAuthenticationManager, sdm.services.noop"
    dependency-check="none"
    init-method="dependenciesInjected">
    <property name="Configuration">
      <ref local="Configuration" />
    </property>

    <property name="Container">
      <ref local="SdmBusinessObjectContainer" />
    </property>
    <property name="Authenticators">
      <list>
        <ref local="NoopAuthenticator" />
      </list>
    </property>
  </object>
  <object id="NoopAuthenticator" type="sdm.services.noop.security.authentication.NoopAuthenticator, sdm.services.noop"/>


  <object id="NoopAuthorisationService"
    type="sdm.services.noop.security.authorisation.AuthorisationService, sdm.services.noop"
    dependency-check="none"/>

  <object id="NoopRecorder"
    type="sdm.services.noop.sdmRecorder.NoopRecorder, sdm.services.noop"
    dependency-check="none"
    init-method="dependenciesInjected">
  </object>

  <object id="SdmBusinessObjectContainer" type="sdm.systems.reflector.container.SdmBusinessObjectContainer, sdm.systems.reflector">
    <property name="ObjectFactory" ref="SdmObjectFactory" />
  </object>
</objects>
