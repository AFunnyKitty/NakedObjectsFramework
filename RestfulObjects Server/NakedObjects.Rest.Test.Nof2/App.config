<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<sectionGroup name="spring">
			<section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core" />
			<section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core" />
		</sectionGroup>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" />
	</configSections>

  <spring>
		<context type="Spring.Context.Support.XmlApplicationContext, Spring.Core">
			<resource uri="config://spring/objects" />
		</context>
		<objects>
		
			<object id="ServiceLocator" type="sdm.systems.application.ClientSideServiceLocator, sdm.systems.application" factory-method="singletonInstance"/>
		
			<!-- ******************************************************************************************* -->	
			<!-- ClientComponents -->
			<!-- This SdmStatic component is a true global singleton only one of these will ge created with -->
			<!-- the "CreateOnePerAppServer" method - and this acts as a bucket for all Singletons in the Sdm -->
			<!-- AppServer. If all interested code gets these components from this location, we are guaranteed -->
			<!-- there will only ever be one instance. -->
			<!-- ******************************************************************************************* -->	
			<object id="ClientComponents" 
				type="sdm.systems.application.ClientComponents, sdm.systems.application"
				factory-method="CreateOnePerAppServer">
		
				<property name="Services">
					<dictionary>
            <entry key="sdm.systems.application.services.api.recorder.IRecorder">
              <ref local="NoopRecorder" />
            </entry>

          </dictionary>
				</property>

				<property name="Repositories">
					<dictionary>
            <entry key="NakedObjects.Rest.Test.Data.IMostSimpleRepository">
              <ref local="MostSimpleRepository" />
            </entry>
            <!--<entry key="sdm.cap.bom.repository.ICAPRepository">
              <ref local="CAPRepository" />
            </entry>-->
          </dictionary>
				</property>
				
				<property name="ExternalCommandLibraries">
					<dictionary>
          </dictionary>
				</property>
				
			</object>

      <object id="MostSimpleRepository"
  type="NakedObjects.Rest.Test.Data.NaiveRepository, sdm.NakedObjects.Rest.Test.Data"
  dependency-check="none">
        <property name="Container">
          <ref local="SdmBusinessObjectContainer" />
        </property>
      </object>

      <!--<object id="CAPRepository"
        type="sdm.cap.bom.repository.naive.NaiveCAPRepository, sdm.cap.bom"
        dependency-check="none">
        <property name="Container">
          <ref local="SdmBusinessObjectContainer" />
        </property>
      </object>-->

      <object id="UserContext" type="sdm.core.boot.DotNetUserContext, sdm.core.boot">
				<property name="AuthorisationService" ref="NoopAuthorisationService" />
				<property name="RootClasses">
					<list>
            <value>NakedObjects.Rest.Test.Data.MostSimpleMenu</value>
            <!--<value>sdm.cap.bom.menu.CAPMenu</value>-->
          </list>
				</property>
			</object>

      
      
			<!--
			- NOF framework itself and SDM implementations of NOF interfaces
			-->
			<object id="NakedObjects" type="org.nakedobjects.object.repository.NakedObjectsClient, nakedobjects.net" init-method="init">
				<property name="ObjectPersistor" ref="LocalObjectManager" />
				<property name="Configuration" ref="Configuration" />
				<property name="ObjectLoader" ref="ObjectLoader" />
				<property name="SpecificationLoader" ref="SdmSpecificationLoader" />

			</object>
			<object id="ObjectLoader" type="org.nakedobjects.object.loader.ObjectLoaderImpl,nakedobjects.net">
				<description>
					To reuse the same instance each time set factory method = instance (i.e. singleton);
					The clearNonRefDataObjects() method is called when the nof is shutdown.
					If we are not using a singleton then the cacheloader will be recreated each time the nof is started.
				</description>
				<property name="ObjectFactory" ref="SdmObjectFactory" />
				<property name="AdapterFactory" ref="AdapterFactory" />
			</object>
			<object id="ShutdownListener" type="sdm.core.boot.DotNetClientShutdown, sdm.core.boot" />
			<object id="UpdateNotifier" type="org.nakedobjects.viewer.skylark.ViewUpdateNotifier, nakedobjects.net" />
      
			<object id="ProcessNotifier" type="sdm.services.processnotifier.ProcessNotifierService, sdm.services.impl" />
      			
			<object id="SdmObjectFactory" type="sdm.systems.reflector.container.SdmObjectFactory, sdm.systems.reflector"/>
			<object id="AdapterFactory" type="sdm.systems.reflector.SdmReflectorFactory, sdm.systems.reflector" />
			<object id="LocalObjectManager" type="org.nakedobjects.object.persistence.objectstore.ObjectStorePersistor, nakedobjects.net">
				<property name="ObjectStore">
					<ref local="TransientObjectStore" />
				</property>
				<property name="PersistAlgorithm">
					<ref local="DefaultPersistAlgorithm" />
				</property>
			</object>
			<object id="TransientObjectStore" type="org.nakedobjects.object.persistence.objectstore.inmemory.TransientObjectStore, nakedobjects.net" />
			<object id="DefaultPersistAlgorithm" type="org.nakedobjects.object.persistence.DefaultPersistAlgorithm, nakedobjects.net">
				<property name="OidGenerator">
					<ref local="TimeBasedOidGenerator" />
				</property>
			</object>
			<object id="TimeBasedOidGenerator" type="org.nakedobjects.object.persistence.TimeBasedOidGenerator, nakedobjects.net"/>
			<object id="SdmSpecificationLoader" type="sdm.systems.reflector.SdmSpecificationLoader, sdm.systems.reflector">
				<property name="ReflectionPeerFactories">
					<list>
						<ref local="TransactionPeerFactory" />
					</list>
				</property>
			</object>
			<object id="TransactionPeerFactory" type="org.nakedobjects.object.transaction.TransactionPeerFactory, nakedobjects.net"/>
			<alias name="ProgrammableClock" alias="ClientClock" />
			<object id="ProgrammableClock" type="sdm.systems.application.time.programmable.ProgrammableClock, sdm.systems.application"/>
			
			<object id="Configuration" type="sdm.services.configurationservice.nofFramework.Configuration, sdm.services.impl">
				<constructor-arg index="0">
					<value>nakedobjects.properties</value>
				</constructor-arg>
			</object>
      
			<!-- ClientSideServiceLocator looks for alias ClientAuthenticationManager-->
			<alias name="AuthenticationManager" alias="ClientAuthenticationManager" />
			<object id="AuthenticationManager" 
				type="sdm.services.noop.security.authentication.NoopAuthenticationManager, sdm.services.noop"
				dependency-check="none" 
				init-method="dependenciesInjected">
				<property name="Configuration">
					<ref local="Configuration" />
				</property>
        
				<property name="Container">
					<ref local="SdmBusinessObjectContainer" />
				</property>
				<property name="Authenticators">
					<list>
						<ref local="NoopAuthenticator" />
					</list>
				</property>
			</object>
			<object id="NoopAuthenticator" type="sdm.services.noop.security.authentication.NoopAuthenticator, sdm.services.noop"/>


			<object id="NoopAuthorisationService" 
				type="sdm.services.noop.security.authorisation.AuthorisationService, sdm.services.noop"
				dependency-check="none"/>

      <object id="NoopRecorder"
        type="sdm.services.noop.sdmRecorder.NoopRecorder, sdm.services.noop"
        dependency-check="none"
        init-method="dependenciesInjected">
      </object>

			<object id="SdmBusinessObjectContainer" type="sdm.systems.reflector.container.SdmBusinessObjectContainer, sdm.systems.reflector">
				<property name="ObjectFactory" ref="SdmObjectFactory" />
			</object>
		</objects>
	</spring>


	<!-- ******************************************************************************************* -->	
	<!-- LOG4NET CONFIGURATION -->
	<!-- ******************************************************************************************* -->	
	<log4net debug="true" info="true">
		<appender name="LogFileAppender" type="log4net.Appender.FileAppender,log4net">
			<param name="File" value="logs\\sdmexploration.log" />
			<param name="AppendToFile" value="true" />
			<layout type="log4net.Layout.PatternLayout,log4net">
				<param name="ConversionPattern" value="%d [%t] %-5p %c [%x] - %m%n" />
			</layout>
		</appender>
		<appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender,log4net">
			<layout type="log4net.Layout.PatternLayout,log4net">
				<param name="ConversionPattern" value="%d [%t] %-5p %c [%x] - %m%n" />
			</layout>
		</appender>
		<root>
			<priority value="ERROR" />
			<appender-ref ref="LogFileAppender" />
			<appender-ref ref="ConsoleAppender" />
		</root>
		<logger name="sdm.utilities.ExceptionHelper">
			<level value="ERROR" />
			<appender-ref ref="LogFileAppender" />
			<appender-ref ref="ConsoleAppender" />
		</logger>
	</log4net>
	
	<!-- ******************************************************************************************* -->	
	<!-- APP SETTINGS -->
	<!-- ******************************************************************************************* -->	
	<appSettings>
		<!-- Switches -->
		<add key="PersistentObjectStore" value="False"/>
		<add key="AppError" value="c:\sdmerror.txt"/>
		<add key="sdm.prototyping" value="True"/>
		<add key="sdm.clientservermode" value="False" />
		<add key="sdm.common.bom.debtManagement.disabled" value="False" />
    <add key="sdm.loa.bom.lightclaims.JobSeekersCertification.enabled" value="True" />
    <!-- SigLite, Epad, Fake, None -->
    <add key="sdm.loa.bom.lightclaims.SignatureCaptureTechnology" value="Fake" />
    <!-- Fake, None -->
    <add key="sdm.loa.bom.lightclaims.PhotoCaptureTechnology" value="Fake" />
    <!-- EA061012: Use this switch to enable/disable the CB Events -->
		<add key="sdm.services.cbEvents.enabled" value="True" />
		<add key="sdm.services.domCareEvents.enabled" value="True" />
		<!-- EA0811: Use this switch to enable/disable the CPS Events re Benefit Journals -->
		<add key="sdm.services.cpsEvents.enabled" value="True" />	  
		<add key="sdm.common.bom.pubsub.enabled" value="True" />
		<add key="sdm.common.bom.workflow.taskobject.enabled" value="False" />
		<add key="sdm.core.boot.mousewheel.enabled" value="False" />
		<add key="sdm.common.bom.workflow.taskobject.enforceActionContext" value="False" />
		<!--a comma seperated list of Problem Irish Bank Sort codes which prevent validation of account numbers -->	
		<add key="ListOfProblemIrishBankSortCodes" value="990220," />
		<add key="ClientSettingsProvider.ServiceUri" value="" />
		<!--a comma seperated list of valid Mobile Phone number area codes -->
		<add key="sdm.common.bom.events.sms.SMSMessageProcessing.ListOfValidMobileAreaCodes" value="083,085,086,087" />
		<add key="Login.DefaultUserName" value="sdmtraining3" />
		<add key="Login.DefaultUserPassword" value="somevalue" />
		<add key="sdm.services.eforms.serverpdfrootpath" value="etc\eforms" />
		<add key="sdm.mrcm.bom.payments.MCClaimRequired" value="True"/>
	</appSettings>
  <system.serviceModel>
    <bindings>
      <!-- Conncetion Settings For Self Certification By Mobile Phone Application Commom.Bom.src.customers.safe -->
      <netNamedPipeBinding>
        <binding name="duplexendpoint" closeTimeout="00:25:00" openTimeout="00:25:00" receiveTimeout="00:25:00" sendTimeout="00:25:00" transactionFlow="false" transferMode="Buffered" transactionProtocol="OleTransactions" hostNameComparisonMode="StrongWildcard" maxBufferPoolSize="524288" maxBufferSize="65536" maxConnections="10" maxReceivedMessageSize="65536">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384" maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="Transport">
            <transport protectionLevel="EncryptAndSign" />
          </security>
        </binding>
      </netNamedPipeBinding>
    </bindings>
    <client>
      <endpoint address="net.pipe://localhost/" binding="netNamedPipeBinding" bindingConfiguration="duplexendpoint" contract="ServiceReference1.IService1" name="duplexendpoint">
      </endpoint>
    </client>
  </system.serviceModel>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
</configuration>
